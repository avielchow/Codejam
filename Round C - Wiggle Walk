The Problem is on Google

https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050ff2/0000000000150aac

I was unable to get the quick solution. I tried to do the problem with two dictionaries, one with the keys as the rows and one with the keys as columns. I found implementation for updating the dictionaries too messy. The best solution I found was here:

https://codereview.stackexchange.com/questions/221119/solution-to-kickstarts-wiggle-walk

In this solution, all neighbors (N,S,E,W) of the current block is always entered as a dictionary key. When traversing, if the direction ever lands on one of these keys, the value is a set that provides you with the new location. It took me quite a while to understand how the code worked.

Key take away:

In my brute force solution, the time complexity was N * r or N * c. N was the visited squares and it was possible to have to traverse N r, or c times. In the dictionary method, I think the time complexity is O(N) because you only traverse the dictionary keys once. 
